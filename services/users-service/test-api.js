const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

// Funci√≥n para hacer pausa entre requests
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Funci√≥n para mostrar resultados
const logResult = (testName, response) => {
  console.log(`\n‚úÖ ${testName}`);
  console.log(`Status: ${response.status}`);
  console.log('Response:', JSON.stringify(response.data, null, 2));
};

// Funci√≥n para mostrar errores
const logError = (testName, error) => {
  console.log(`\n‚ùå ${testName}`);
  console.log(`Error: ${error.message}`);
  if (error.response) {
    console.log(`Status: ${error.response.status}`);
    console.log('Response:', JSON.stringify(error.response.data, null, 2));
  }
};

// Tests del CRUD
async function testUsersAPI() {
  console.log('üß™ Iniciando pruebas del Users Microservice...\n');
  
  try {
    // 1. Health Check
    console.log('1Ô∏è‚É£ Probando Health Check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    logResult('Health Check', healthResponse);
    
    await delay(1000);
    
    // 2. GET - Obtener todos los usuarios (iniciales)
    console.log('\n2Ô∏è‚É£ Probando GET /users (usuarios iniciales)...');
    const getAllResponse = await axios.get(`${BASE_URL}/users`);
    logResult('GET /users', getAllResponse);
    
    await delay(1000);
    
    // 3. POST - Crear nuevo usuario
    console.log('\n3Ô∏è‚É£ Probando POST /users (crear usuario)...');
    const newUser = {
      name: 'Ana Rodr√≠guez',
      email: 'ana@email.com',
      age: 27
    };
    const createResponse = await axios.post(`${BASE_URL}/users`, newUser);
    logResult('POST /users', createResponse);
    
    const userId = createResponse.data.data.id;
    await delay(1000);
    
    // 4. GET - Obtener usuario espec√≠fico
    console.log('\n4Ô∏è‚É£ Probando GET /users/:id...');
    const getByIdResponse = await axios.get(`${BASE_URL}/users/${userId}`);
    logResult('GET /users/:id', getByIdResponse);
    
    await delay(1000);
    
    // 5. PUT - Actualizar usuario
    console.log('\n5Ô∏è‚É£ Probando PUT /users/:id (actualizar usuario)...');
    const updatedUser = {
      name: 'Ana Rodr√≠guez L√≥pez',
      email: 'ana.rodriguez@email.com',
      age: 28
    };
    const updateResponse = await axios.put(`${BASE_URL}/users/${userId}`, updatedUser);
    logResult('PUT /users/:id', updateResponse);
    
    await delay(1000);
    
    // 6. GET - Verificar actualizaci√≥n
    console.log('\n6Ô∏è‚É£ Probando GET /users/:id (verificar actualizaci√≥n)...');
    const verifyUpdateResponse = await axios.get(`${BASE_URL}/users/${userId}`);
    logResult('GET /users/:id (verificado)', verifyUpdateResponse);
    
    await delay(1000);
    
    // 7. DELETE - Eliminar usuario
    console.log('\n7Ô∏è‚É£ Probando DELETE /users/:id...');
    const deleteResponse = await axios.delete(`${BASE_URL}/users/${userId}`);
    logResult('DELETE /users/:id', deleteResponse);
    
    await delay(1000);
    
    // 8. GET - Verificar eliminaci√≥n
    console.log('\n8Ô∏è‚É£ Probando GET /users/:id (verificar eliminaci√≥n)...');
    try {
      await axios.get(`${BASE_URL}/users/${userId}`);
    } catch (error) {
      logError('GET /users/:id (usuario eliminado)', error);
    }
    
    // 9. Prueba de validaci√≥n - Email duplicado
    console.log('\n9Ô∏è‚É£ Probando validaci√≥n de email duplicado...');
    try {
      await axios.post(`${BASE_URL}/users`, {
        name: 'Test User',
        email: 'juan@email.com', // Email que ya existe
        age: 25
      });
    } catch (error) {
      logError('POST /users (email duplicado)', error);
    }
    
    // 10. Prueba de validaci√≥n - Datos inv√°lidos
    console.log('\nüîü Probando validaci√≥n de datos inv√°lidos...');
    try {
      await axios.post(`${BASE_URL}/users`, {
        name: 'A', // Nombre muy corto
        email: 'invalid-email', // Email inv√°lido
        age: -5 // Edad inv√°lida
      });
    } catch (error) {
      logError('POST /users (datos inv√°lidos)', error);
    }
    
    console.log('\nüéâ ¬°Todas las pruebas completadas!');
    console.log('üìä Resumen:');
    console.log('- ‚úÖ Health Check funcionando');
    console.log('- ‚úÖ CRUD completo funcionando');
    console.log('- ‚úÖ Validaciones funcionando');
    console.log('- ‚úÖ Manejo de errores funcionando');
    
  } catch (error) {
    console.error('\nüí• Error en las pruebas:', error.message);
  }
}

// Ejecutar pruebas
testUsersAPI();
